data = res_wilcox,
aes(x = distance / 1000, y = pvalue, shape = island, fill = variable)
) +
geom_vline(xintercept = 0.5) +
geom_vline(xintercept = 1, lty = 2) +
geom_vline(xintercept = 5, lty = 3) +
geom_vline(xintercept = 10, lty = 4) +
geom_point(size = 5) +
scale_x_log10() +
scale_y_log10() +
theme_bw() +
xlab("Distance (km)") +
ylab("P-value") +
scale_fill_manual(values = rev(brewer.pal(length(variables), "YlOrRd"))) +
scale_shape_manual(values = 21:25) +
guides(fill = guide_legend(override.aes = list(shape = 21))) +
facet_grid(. ~ paste(habitat_i, habitat_j, sep = " vs ")) +
labs(fill = "Variable", shape = "Island") +
theme(legend.position = "bottom", legend.box = "vertical")
p
ggsave("figure_distances.png", p, width = 8, height = 4, dpi = 300)
ggsave("figure_distances.png", p, width = 7, height = 3, dpi = 300)
ggsave("figure_distances.png", p, width = 7, height = 4, dpi = 300)
ggsave("figure_distances.png", p, width = 7, height = 3.5, dpi = 300)
p + aes(y = island)
p + aes(y = island) + scale_y_discrete()
p + aes(y = island) + scale_y_discrete() + ylab(NULL)
p2 <- p + aes(y = island) + scale_y_discrete() + ylab(NULL)
ggsave("figure_distances2.png", p, width = 7, height = 3.5, dpi = 300)
ggsave("figure_distances2.png", p2, width = 7, height = 3.5, dpi = 300)
p.adjust()
p.adjust
?p.adjust
res_wilcox <- res_wilcox %>% mutate(pvalue = p.adjust(pvalue, method = "BH"))
res_wilcox <- res_wilcox %>% filter(pvalue < 0.05)
p <- ggplot(
data = res_wilcox,
aes(x = distance / 1000, y = pvalue, shape = island, fill = variable)
) +
geom_vline(xintercept = 0.5) +
geom_vline(xintercept = 1, lty = 2) +
geom_vline(xintercept = 5, lty = 3) +
geom_vline(xintercept = 10, lty = 4) +
geom_point(size = 5) +
scale_x_log10() +
scale_y_log10() +
theme_bw() +
xlab("Distance (km)") +
ylab("P-value") +
scale_fill_manual(values = rev(brewer.pal(length(variables), "YlOrRd"))) +
scale_shape_manual(values = 21:25) +
guides(fill = guide_legend(override.aes = list(shape = 21))) +
facet_grid(. ~ paste(habitat_i, habitat_j, sep = " vs ")) +
labs(fill = "Variable", shape = "Island") +
theme(legend.position = "bottom", legend.box = "vertical")
p
res_wilcox %>% mutate(pvalue = p.adjust(pvalue, method = "BH"))
res_wilcox <- res_wilcox %>% filter(pvalue < 0.01)
# Plot P-values against distances
p <- ggplot(
data = res_wilcox,
aes(x = distance / 1000, y = pvalue, shape = island, fill = variable)
) +
geom_vline(xintercept = 0.5) +
geom_vline(xintercept = 1, lty = 2) +
geom_vline(xintercept = 5, lty = 3) +
geom_vline(xintercept = 10, lty = 4) +
geom_point(size = 5) +
scale_x_log10() +
scale_y_log10() +
theme_bw() +
xlab("Distance (km)") +
ylab("P-value") +
scale_fill_manual(values = rev(brewer.pal(length(variables), "YlOrRd"))) +
scale_shape_manual(values = 21:25) +
guides(fill = guide_legend(override.aes = list(shape = 21))) +
facet_grid(. ~ paste(habitat_i, habitat_j, sep = " vs ")) +
labs(fill = "Variable", shape = "Island") +
theme(legend.position = "bottom", legend.box = "vertical")
ggsave("figure_distances.png", p, width = 7, height = 3.5, dpi = 300)
p
?npcomp
data <- cbind(data, npcomp(data, wl, nesting = "island", reduce = 1:4))
# Kepp only the most significant islands
keep <- c("Abaco", "Bimini", "Cayman Brac", "Little Cayman", "Long Island")
data <- read.csv("data/reflectance.csv", header = TRUE)
wl <- paste0("wl", 300:700)
variables <- paste0("PC", 1:4)
data <- cbind(data, npcomp(data, wl, nesting = "island", reduce = 1:4))
data <- cbind(data, npcomp(data, wl, nesting = "island", reduce = 1:4)$x)
# Welcome to hell...
rm(list = ls())
# Here we explore the distances at which differences between sites are detected
library(tidyverse)
library(nmgc)
data <- read.csv("data/reflectance.csv", header = TRUE)
wl <- paste0("wl", 300:700)
variables <- paste0("PC", 1:4)
data <- cbind(data, npcomp(data, wl, nesting = "island", reduce = 1:4)$x)
# Kepp only the most significant islands
keep <- c("Abaco", "Bimini", "Cayman Brac", "Little Cayman", "Long Island")
data <- data %>% filter(island %in% keep)
data <- data %>% select(island, habitat, site, longitude, latitude, PC1, PC2, PC3, PC4)
# Rearrange the data
data <- data %>% gather_("variable", "score", variables)
# Function to compare sites within an island for a given variable
compare_sites <- function(data) {
data <- data %>%
group_by(site, habitat, longitude, latitude) %>%
nest()
ii <- 1:(nrow(data) - 1)
names(ii) <- ii
out <- map_dfr(ii, function(i) {
jj <- (i + 1):(nrow(data))
names(jj) <- jj
map_dfr(jj, function(j) {
res <- wilcox.test(data$data[[i]]$score, data$data[[j]]$score)
data.frame(U = res$statistic, pvalue = res$p.value)
}, .id = "j")
}, .id = "i")
out <- out %>% mutate_at(c("i", "j"), as.numeric)
out <- out %>% mutate(
habitat_i = map_chr(i, ~ as.character(data$habitat[.x])),
habitat_j = map_chr(j, ~ as.character(data$habitat[.x]))
)
out <- out %>% filter(habitat_i != habitat_j)
out <- out %>% mutate(
lon_i = map_dbl(i, ~ data$longitude[.x]),
lat_i = map_dbl(i, ~ data$latitude[.x]),
lon_j = map_dbl(j, ~ data$longitude[.x]),
lat_j = map_dbl(j, ~ data$latitude[.x])
)
out <- out %>% mutate(
distance = pmap_dbl(list(lon_i, lat_i, lon_j, lat_j), function(x1, y1, x2, y2) {
distm(x = c(x1, y1), y = c(x2, y2))
})
)
}
# Apply the function across islands and variables
res_wilcox <- data %>%
group_by(island, variable) %>%
nest() %>%
mutate(test = map(data, compare_sites)) %>%
select(-data) %>%
unnest(cols = c(test)) %>%
select(-i, -j)
# Read in the results of the post-hoc tests
res_posthoc <- read.csv("analyses/07-ANOVA/table_posthoc.csv", header = TRUE)
res_posthoc <- res_posthoc %>% filter(pvalue < 0.05)
res_posthoc <- res_posthoc %>% rename(island = "nesting")
res_postkw <- read.csv("analyses/07-ANOVA/table_postkw.csv", header = TRUE)
res_postkw <- res_postkw %>% filter(pvalue < 0.05)
# Combine parametric and nonparametric significant contrasts
res_posthoc <- res_posthoc %>% group_by(island, variable) %>% nest()
res_postkw <- res_postkw %>% group_by(island, variable) %>% nest()
res_postkw <- res_postkw %>% rename(data2 = "data")
res_posthoc <- res_posthoc %>%
full_join(res_postkw) %>%
mutate(data = map2(data, data2, ~ if (is.null(.y)) .x else .y)) %>%
select(-data2) %>%
unnest(cols = c(data)) %>%
rename(habitat_i = "contrast1", habitat_j = "contrast2")
# Keep the site comparisons for the significant contrasts only
res_posthoc <- res_posthoc %>% group_by(island, variable, habitat_i, habitat_j) %>% nest()
res_wilcox <- res_wilcox %>% group_by(island, variable, habitat_i, habitat_j) %>% nest()
res_wilcox <- res_wilcox %>% rename(data2 = "data")
res_wilcox <- res_wilcox %>%
right_join(res_posthoc) %>%
select(-data) %>%
unnest(cols = c(data2))
# Correct P-values for multiple testing and keep the most significant
res_wilcox <- res_wilcox %>% mutate(pvalue = p.adjust(pvalue, method = "BH"))
res_wilcox <- res_wilcox %>% filter(pvalue < 0.05)
# Plot P-values against distances
p <- ggplot(
data = res_wilcox,
aes(x = distance / 1000, y = pvalue, shape = island, fill = variable)
) +
geom_vline(xintercept = 0.5) +
geom_vline(xintercept = 1, lty = 2) +
geom_vline(xintercept = 5, lty = 3) +
geom_vline(xintercept = 10, lty = 4) +
geom_point(size = 5) +
scale_x_log10() +
scale_y_log10() +
theme_bw() +
xlab("Distance (km)") +
ylab("P-value") +
scale_fill_manual(values = rev(brewer.pal(length(variables), "YlOrRd"))) +
scale_shape_manual(values = 21:25) +
guides(fill = guide_legend(override.aes = list(shape = 21))) +
facet_grid(. ~ paste(habitat_i, habitat_j, sep = " vs ")) +
labs(fill = "Variable", shape = "Island") +
theme(legend.position = "bottom", legend.box = "vertical")
p
ggsave("figure_distances.png", p, width = 7, height = 3.5, dpi = 300)
# Plot significant distances across islands
p2 <- p + aes(y = island) + scale_y_discrete() + ylab(NULL)
p2
ggsave("figure_distances2.png", p2, width = 7, height = 3.5, dpi = 300)
# Assess the correlation between distance and P-value
res_spearman <- with(res_wilcox, cor.test(distance, pvalue, method = "spearman"))
res_spearman <- with(res_spearman, list(rho = round(estimate, 3), pvalue = round(p.value, 4)))
label <- 'rho==%s~" P = %s"'
label <- sprintf(label, res_spearman$rho, res_spearman$pvalue)
res_wilcox
t1 <- res_wilcox %>% select(-U, -pvalue)
t1 %>% bind_cols(res_wilcox %>% select(U, pvalue))
t1 %>% bind_cols(res_wilcox %>% ungroup %>% select(U, pvalue))
t1 <- t1 %>% add_signif()
t1 <- res_wilcox %>% select(-U, -pvalue)
t1 <- t1 %>% bind_cols(res_wilcox %>% ungroup %>% select(U, pvalue))
t1 <- t1 %>% add_signif()
save_table(t1, "table_wilcoxon", digits = c(0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 4))
df <- data.frame(a = 1:3, b = 1:3)
install.packages("knitr")
library(knitr)
kable(df)
kable(df, format = "latex")
kable(df, format = "latex", booktabs = TRUE)
kable(df, format = "latex", booktabs = TRUE, caption = "hey")
?knitr::kable
library(dewlap)
# This script was used to generate the table of counts across islands and habitats
rm(list = ls())
data <- read.csv("data/reflectance.csv", header = TRUE)
tab <- table(data$island, data$habitat)
save_table(tab, "analyses/01-counts/table_counts")
# This script was used to generate the table of counts across islands and habitats
rm(list = ls())
library(dewlap)
data <- read.csv("data/reflectance.csv", header = TRUE)
tab <- table(data$island, data$habitat)
save_table(tab, "analyses/01-counts/table_counts")
library(dewlap)
library(dewlap)
data <- read.csv("data/reflectance.csv", header = TRUE)
tab <- table(data$island, data$habitat)
save_table(tab, "analyses/01-counts/table_counts")
?save_table
roxygen2::roxygenize()
install.packages("roxygen2")
roxygen2::roxygenize()
library(dewlap)
rm(list = ls())
library(dewlap)
data <- read.csv("data/reflectance.csv", header = TRUE)
tab <- table(data$island, data$habitat)
save_tsave
save_table()
?save_table
save_table(tab, "analyses/01-counts/table_counts")
roxygen2::roxygenize()
library(dewlap)
tab
rm(list = ls())
library(dewlap)
library(dewlap)
data <- read.csv("data/reflectance.csv", header = TRUE)
tab <- table(data$island, data$habitat)
?save_table
roxygen2::roxygenize()
library(dewlap)
?save_table
?kable
roxygen2::roxygenize()
library(dewlap)
library(dewlap)
?save_table
# This script was used to generate the table of counts across islands and habitats
rm(list = ls())
library(dewlap)
data <- read.csv("data/reflectance.csv", header = TRUE)
tab <- table(data$island, data$habitat)
col_names <- c("Island", "coastal", "coppice", "mangrove")
save_table(tab, "analyses/01-counts/table_counts", col_names = col_names)
library(dewlap)
# This script was used to generate the table of counts across islands and habitats
rm(list = ls())
library(dewlap)
data <- read.csv("data/reflectance.csv", header = TRUE)
tab <- table(data$island, data$habitat)
col_names <- c("Island", "coastal", "coppice", "mangrove")
save_table(tab, "analyses/01-counts/table_counts", col_names = col_names)
library(tidyverse)
# This script was used to generate the table of counts across islands and habitats
rm(list = ls())
library(dewlap)
library(tidyverse)
data <- read.csv("data/reflectance.csv", header = TRUE)
tab <- table(data$island, data$habitat)
tab <- data.frame(tab) %>% rownames_to_column("Island")
save_table(tab, "analyses/01-counts/table_counts")
data <- read.csv("data/reflectance.csv", header = TRUE)
tab <- table(data$island, data$habitat)
tab
as.data.frame(tab)
tab %>% rownames_to_column("Island")
# This script was used to generate the table of counts across islands and habitats
rm(list = ls())
library(dewlap)
library(tidyverse)
data <- read.csv("data/reflectance.csv", header = TRUE)
tab <- table(data$island, data$habitat)
save_table(tab, "analyses/01-counts/table_counts")
rm(list = ls())
library(nmgc)
library(tidyverse)
library(knitr)
install.packages("devtools")
devtools::install_github("rscherrer/nmgc")
devtools::install_github("rscherrer/nmgc")
install.packages(c("MuMIn", "MVN" "mvtnorm", "plotrix", "mda", "glmnet", "car"))
install.packages(c("MuMIn", "MVN", "mvtnorm", "plotrix", "mda", "glmnet", "car"))
install.packages("knitr")
library(nmgc)
install.packages("tidyverse")
devtools::install_github("rscherrer/nmgc")
install.packages("xgboost")
install.packages("xgboost")
devtools::install_github("rscherrer/nmgc")
install.packages("Rmpfr")
install.packages("Rmpfr")
devtools::install_github("rscherrer/nmgc")
# This script was used to generate the table of counts across islands and habitats
rm(list = ls())
library(dewlap)
data <- read.csv("data/reflectance.csv", header = TRUE)
tab <- table(data$island, data$habitat)
save_table(tab, "analyses/01-counts/table_counts")
install.packages("cowplot")
library(dewlap)
# This script was used to generate the table of counts across islands and habitats
rm(list = ls())
library(dewlap)
data <- read.csv("data/reflectance.csv", header = TRUE)
tab <- table(data$island, data$habitat)
save_table(tab, "analyses/01-counts/table_counts")
?kable
#' Save tables for this study
#'
#' @param tab The table
#' @param nm File name (without the extension)
#' @param digits,col_names Parameters for `knitr::kable`
#'
#' @return Nothing. Just saves.
#'
#' @export
save_table <- function(tab, nm, digits = 0, col_names = NULL) {
library(knitr)
# Save table as CSV
write.csv(tab, paste0(nm, ".csv"), row.names = FALSE)
# Save LaTeX table
if (is.null(col_names)) col_names <- NA
tab <- knitr::kable(
tab, "latex", digits = digits, booktabs = TRUE, col.names = col_names,
linesep = ""
)
texfile <- file(paste0(nm, ".tex"))
writeLines(tab, texfile)
close(texfile)
}
# This script was used to generate the table of counts across islands and habitats
rm(list = ls())
library(dewlap)
data <- read.csv("data/reflectance.csv", header = TRUE)
tab <- table(data$island, data$habitat)
save_table(tab, "analyses/01-counts/table_counts")
#' Save tables for this study
#'
#' @param tab The table
#' @param nm File name (without the extension)
#' @param digits,col_names Parameters for `knitr::kable`
#'
#' @return Nothing. Just saves.
#'
#' @export
save_table <- function(tab, nm, digits = 0, col_names = NULL) {
library(knitr)
# Save table as CSV
write.csv(tab, paste0(nm, ".csv"), row.names = FALSE)
# Save LaTeX table
if (is.null(col_names)) col_names <- NA
tab <- knitr::kable(
tab, "latex", digits = digits, booktabs = TRUE, col.names = col_names,
linesep = ""
)
texfile <- file(paste0(nm, ".tex"))
writeLines(tab, texfile)
close(texfile)
}
save_table(tab, "analyses/01-counts/table_counts")
library(dewlap)
rm(list = ls())
library(nmgc)
library(tidyverse)
data <- read.csv("data/reflectance.csv", header = TRUE)
# Perform PCA on each island
pca <- npcomp(data, paste0("wl", 300:700), nesting = "island", combine = TRUE, reduce = 1:4)
# And on the whole archipelago
pca_pooled <- npcomp(data, paste0("wl", 300:700))
# Calculate brightness (mean reflectance)
data$brightness <- data %>% select_at(paste0("wl", 300:700)) %>% apply(1, mean)
# Attach PC1
data <- data %>% select_at(c("island", "habitat", "brightness"))
data$PC1 <- pca$x$PC1
data$PC1pooled <- pca_pooled$x[, 1]
data <- data %>%
gather_("variable", "PC1", c("PC1", "PC1pooled")) %>%
mutate(island = ifelse(variable == "PC1pooled", "Archipelago", as.character(island))) %>%
dplyr::select(-variable)
# Measure correlation
res_cor <- data %>%
split(f = .[["island"]]) %>%
map_dfr(
~ cor.test(.x$PC1, .x$brightness) %>%
.[c("estimate", "p.value")] %>%
data.frame %>%
rename(r2 = "estimate", pvalue = "p.value") %>%
mutate(r2 = r2^2),
.id = "island"
)
# Reorder
res_cor <- res_cor %>%
filter(island != "Archipelago") %>%
rbind(., res_cor %>% filter(island == "Archipelago"))
# Save table
t1 <- res_cor
t1 <- t1 %>%
add_signif() %>%
mutate(pvalue = ifelse(pvalue < 0.0001, "< 0.0001", pvalue))
colnames(t1)[colnames(t1) == "signif"] <- ""
save_table(t1, "analyses/03-PCA/table_brightness", digits = c(0, 3, 0))
colnames(t1) <- c("Island", "$R^2$", "P-value", "")
save_table(t1, "analyses/03-PCA/table_brightness", digits = c(0, 3, 0))
?kable
save_table(t1, "analyses/03-PCA/table_brightness", digits = c(0, 3, 0))
library(dewlap)
save_table(t1, "analyses/03-PCA/table_brightness", digits = c(0, 3, 0))
colnames(t1) <- c("Island", "R$^2$", "P", "")
save_table(t1, "analyses/03-PCA/table_brightness", digits = c(0, 3, 0))
library(dewlap)
save_table(t1, "analyses/03-PCA/table_brightness", digits = c(0, 3, 0))
save_table(t1, "analyses/03-PCA/table_brightness", digits = c(0, 3, 0), align = "lrrl")
colnames(t1) <- c("Island", "$R^2$", "$P$", "")
save_table(t1, "analyses/03-PCA/table_brightness", digits = c(0, 3, 0), align = "lrrl")
extra_row <- (pca_pooled$sdev / sum(pca_pooled$sdev))[1:4] %>% as.list
extra_row <- c("Archipelago", extra_row)
names(extra_row) <- colnames(pca$sdev)
expvar <- rbind(pca$sdev, extra_row %>% data.frame())
expvar <- expvar %>% mutate(total = expvar %>% dplyr::select(PC1:PC4) %>% apply(1, sum))
# Save table
t2 <- expvar
t2
col_names <- c("Island", "PC1", "PC2", "PC3", "PC4", "Total")
save_table(t2, "table_expvar", digits = c(0, 3, 3, 3, 3, 3))
col_names <- c("Island", "PC1", "PC2", "PC3", "PC4", "Total")
fname <- "analyses/03-PCA/table_expvar"
save_table(t2, fname, digits = c(0, 3, 3, 3, 3, 3), col_names = col_names)
data <- read.csv("data/reflectance.csv", header = TRUE)
wl <- paste0("wl", 300:700)
variables <- paste0("PC", 1:4)
data <- cbind(data, data.frame(npcomp(data, wl)$x)[, variables])
# 1.1. Multivariate normality
t1 <- test_multinorm(data, variables, grouping = "habitat")[, -1]
# 1.2. Heterogeneity of covariance matrices
t2 <- test_covariance(data, variables, grouping = "habitat")[, -1]
# 1.3. Univariate normality
t3 <- test_multinorm(data, variables, grouping = "habitat", univariate = TRUE)[, -1]
# 1.4. Heterogeneity of variances
t4 <- test_covariance(data, variables, grouping = "habitat", univariate = TRUE)[, -1]
t1
t2
t3
t4
t2
library(dewlap)
t1_names <- c("Habitat", "$HZ$", "$P$", "")
t2_names <- c("$chi^2$", "df", "$P$", "")
t3_names <- c("Habitat", "Variable", "$W$", "$P$", "")
t4_names <- c("Variable", "$K^2$", "df", "$P$", "")
fname <- "analyses/05-assumptions/table_%s"
t1_fname <- sprintf(fname, "multinorm_pooled")
t2_fname <- sprintf(fname, "covariance_pooled")
t3_fname <- sprintf(fname, "normality_pooled")
t4_fname <- sprintf(fname, "variance_pooled")
save_table(t1, t1_fname, digits = c(0, 2, 0, 0), col.names = t1_names)
save_table(t2, t2_fname, digits = c(1, 0, 4, 0), col.names = t2_names)
save_table(t3, t3_fname, digits = c(0, 0, 3, 4, 0), col.names = t3_names)
save_table(t4, t4_fname, digits = c(0, 2, 0, 4), col.names = t4_names)
# 2.1. Multivariate normality
t5 <- test_multinorm(data, variables, grouping = "habitat", nesting = "island")
# 2.2. Homogeneity of covariance matrices
t6 <- test_covariance(data, variables, grouping = "habitat", nesting = "island")
t5
t6
t5_names <- c("Island", "Habitat", "$HZ$", "$P$", "")
t6_names <- c("Island", "$chi^2$", "df", "$P$", "")
t5_fname <- sprintf(fname, "multinorm")
t6_fname <- sprintf(fname, "covariance")
save_table(t5, t5_fname, digits = c(0, 0, 2, 4, 0), col.names = t5_names)
save_table(t6, t6_fname, digits = c(0, 1, 0, 4, 0), col.names = t6_names)
t2_names <- c("$\chi^2$", "df", "$P$", "")
save_table(t2, t2_fname, digits = c(1, 0, 4, 0), col.names = t2_names)
t2_names <- c("$\\chi^2$", "df", "$P$", "")
t2_fname <- sprintf(fname, "covariance_pooled")
t2_names <- c("$\\chi^2$", "df", "$P$", "")
save_table(t2, t2_fname, digits = c(1, 0, 4, 0), col.names = t2_names)
t6_names <- c("Island", "$\\chi^2$", "df", "$P$", "")
save_table(t6, t6_fname, digits = c(0, 1, 0, 4, 0), col.names = t6_names)
# 2.3. Univariate normality
t7 <- test_multinorm(data, variables, grouping = "habitat", nesting = "island", univariate = TRUE)
