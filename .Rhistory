habitat_j = map_chr(j, ~ as.character(data$habitat[.x]))
)
out <- out %>% filter(habitat_i != habitat_j)
out <- out %>% mutate(
lon_i = map_dbl(i, ~ data$longitude[.x]),
lat_i = map_dbl(i, ~ data$latitude[.x]),
lon_j = map_dbl(j, ~ data$longitude[.x]),
lat_j = map_dbl(j, ~ data$latitude[.x])
)
out <- out %>% mutate(
distance = pmap_dbl(list(lon_i, lat_i, lon_j, lat_j), function(x1, y1, x2, y2) {
distm(x = c(x1, y1), y = c(x2, y2))
})
)
}
# Apply the function across islands and variables
res_wilcox <- data %>%
group_by(island, variable) %>%
nest() %>%
mutate(test = map(data, compare_sites)) %>%
select(-data) %>%
unnest(cols = c(test)) %>%
select(-i, -j)
# Read in the results of the post-hoc tests
res_posthoc <- read.csv("analyses/07-ANOVA/table_posthoc.csv", header = TRUE)
res_posthoc <- res_posthoc %>% filter(pvalue < 0.05)
res_posthoc <- res_posthoc %>% rename(island = "nesting")
res_postkw <- read.csv("analyses/07-ANOVA/table_postkw.csv", header = TRUE)
res_postkw <- res_postkw %>% filter(pvalue < 0.05)
# Combine parametric and nonparametric significant contrasts
res_posthoc <- res_posthoc %>% group_by(island, variable) %>% nest()
res_postkw <- res_postkw %>% group_by(island, variable) %>% nest()
res_postkw <- res_postkw %>% rename(data2 = "data")
res_posthoc <- res_posthoc %>%
full_join(res_postkw) %>%
mutate(data = map2(data, data2, ~ if (is.null(.y)) .x else .y)) %>%
select(-data2) %>%
unnest(cols = c(data)) %>%
rename(habitat_i = "contrast1", habitat_j = "contrast2")
# Keep the site comparisons for the significant contrasts only
res_posthoc <- res_posthoc %>% group_by(island, variable, habitat_i, habitat_j) %>% nest()
res_wilcox <- res_wilcox %>% group_by(island, variable, habitat_i, habitat_j) %>% nest()
res_wilcox <- res_wilcox %>% rename(data2 = "data")
res_wilcox <- res_wilcox %>%
right_join(res_posthoc) %>%
select(-data) %>%
unnest(cols = c(data2))
# Correct P-values for multiple testing and keep the most significant
res_wilcox <- res_wilcox %>% mutate(pvalue = p.adjust(pvalue, method = "BH"))
res_wilcox <- res_wilcox %>% filter(pvalue < 0.05)
# Plot P-values against distances
p <- ggplot(
data = res_wilcox,
aes(x = distance / 1000, y = pvalue, shape = island, fill = variable)
) +
geom_vline(xintercept = 0.5) +
geom_vline(xintercept = 1, lty = 2) +
geom_vline(xintercept = 5, lty = 3) +
geom_vline(xintercept = 10, lty = 4) +
geom_point(size = 5) +
scale_x_log10() +
scale_y_log10() +
theme_bw() +
xlab("Distance (km)") +
ylab("P-value") +
scale_fill_manual(values = rev(brewer.pal(length(variables), "YlOrRd"))) +
scale_shape_manual(values = 21:25) +
guides(fill = guide_legend(override.aes = list(shape = 21))) +
facet_grid(. ~ paste(habitat_i, habitat_j, sep = " vs ")) +
labs(fill = "Variable", shape = "Island") +
theme(legend.position = "bottom", legend.box = "vertical")
library(RColorBrewer)
# Plot P-values against distances
p <- ggplot(
data = res_wilcox,
aes(x = distance / 1000, y = pvalue, shape = island, fill = variable)
) +
geom_vline(xintercept = 0.5) +
geom_vline(xintercept = 1, lty = 2) +
geom_vline(xintercept = 5, lty = 3) +
geom_vline(xintercept = 10, lty = 4) +
geom_point(size = 5) +
scale_x_log10() +
scale_y_log10() +
theme_bw() +
xlab("Distance (km)") +
ylab("P-value") +
scale_fill_manual(values = rev(brewer.pal(length(variables), "YlOrRd"))) +
scale_shape_manual(values = 21:25) +
guides(fill = guide_legend(override.aes = list(shape = 21))) +
facet_grid(. ~ paste(habitat_i, habitat_j, sep = " vs ")) +
labs(fill = "Variable", shape = "Island") +
theme(legend.position = "bottom", legend.box = "vertical")
p
# Plot significant distances across islands
p2 <- p + aes(y = island) + scale_y_discrete() + ylab(NULL)
p2
# Assess the correlation between distance and P-value
res_spearman <- with(res_wilcox, cor.test(distance, pvalue, method = "spearman"))
res_spearman <- with(res_spearman, list(rho = round(estimate, 3), pvalue = round(p.value, 4)))
# Save table
t1 <- res_wilcox %>% select(-U, -pvalue)
t1 <- t1 %>% bind_cols(res_wilcox %>% ungroup %>% select(U, pvalue))
t1 <- t1 %>% add_signif()
head(t1)
head(t1)
t1_fname <- "analyses/10-distances/table_wilcoxon"
t1_names <- c("Island", "Variable", "Contrast", "", "Lon. 1", "Lat. 1", "Lon. 2", "Lat. 2", "Distance (m)", "$U$", "$P$")
save_table(t1, t1_fname, digits = c(0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 4), col.names = t1_names)
head(t1)
t1_names <- c("Island", "Variable", "Contrast", "", "Lon. 1", "Lat. 1", "Lon. 2", "Lat. 2", "Distance (m)", "$U$", "$P$", "")
save_table(t1, t1_fname, digits = c(0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 4), col.names = t1_names)
rm(list = ls())
# Exploration of the principal component analysis
library(nmgc)
library(tidyverse)
# Here we are checking first the correlation between PC1 and brightness
# and second, the variance explained by each PC on each island
data <- read.csv("data/reflectance.csv", header = TRUE)
# Perform PCA on each island
pca <- npcomp(data, paste0("wl", 300:700), nesting = "island", combine = TRUE, reduce = 1:4)
# And on the whole archipelago
pca_pooled <- npcomp(data, paste0("wl", 300:700))
####  1. Correlation between brightness and PC1 ####
# Calculate brightness (mean reflectance)
data$brightness <- data %>% select_at(paste0("wl", 300:700)) %>% apply(1, mean)
# Attach PC1
data <- data %>% select_at(c("island", "habitat", "brightness"))
data$PC1 <- pca$x$PC1
data$PC1pooled <- pca_pooled$x[, 1]
data <- data %>%
gather_("variable", "PC1", c("PC1", "PC1pooled")) %>%
mutate(island = ifelse(variable == "PC1pooled", "Archipelago", as.character(island))) %>%
dplyr::select(-variable)
# Measure correlation
res_cor <- data %>%
split(f = .[["island"]]) %>%
map_dfr(
~ cor.test(.x$PC1, .x$brightness) %>%
.[c("estimate", "p.value")] %>%
data.frame %>%
rename(r2 = "estimate", pvalue = "p.value") %>%
mutate(r2 = r2^2),
.id = "island"
)
# Reorder
res_cor <- res_cor %>%
filter(island != "Archipelago") %>%
rbind(., res_cor %>% filter(island == "Archipelago"))
# Save table
t1 <- res_cor
t1 <- t1 %>%
add_signif() %>%
mutate(pvalue = ifelse(pvalue < 0.0001, "< 0.0001", pvalue))
col.names <- c("Island", "$r^2$", "$P$", "")
save_table(
t1, "analyses/03-PCA/table_brightness", digits = c(0, 3, 0),
col.names = col.names, align = "lrrl"
)
# Plot the correlation
p <- data %>%
filter(island != "Archipelago") %>%
ggplot(aes(x = brightness, y = PC1)) +
geom_point() +
theme_bw() +
facet_wrap(. ~ island) +
xlab("Brightness (mean reflectance, %)")
# Add labels
res_cor$r2 <- round(res_cor$r2, 3)
res_cor <- res_cor %>%
mutate(plabel = round(pvalue, 4)) %>%
mutate(plabel = ifelse(pvalue < 0.0001, "P < 0.0001", paste("P =", pvalue))) %>%
mutate(plabel = ifelse(pvalue < 0.05, str_replace(plabel, "$", "*"), plabel))
p + geom_text(
data = res_cor %>% filter(island != "Archipelago"),
aes(label = paste0("r\U000B2 = ", r2, "\n", plabel)), x = 40, y = -25, hjust = 1
)
ggsave("figure_brightness.png", width = 6, height = 6, dpi = 300)
# Now make a figure for the whole archipelago
data %>%
filter(island == "Archipelago") %>%
ggplot(aes(x = brightness, y = PC1)) +
geom_point() +
theme_bw() +
xlab("Brightness (mean reflectance, %)") +
geom_text(
data = res_cor %>% filter(island == "Archipelago"),
aes(label = paste0("r\U000B2 = ", r2, "\n", plabel)), x = 40, y = -25, hjust = 1
)
ggsave("figure_brightness_pooled.png", width = 4, height = 4, dpi = 300)
#### 2. Variance explained by the PCs ####
extra_row <- (pca_pooled$sdev / sum(pca_pooled$sdev))[1:4] %>% as.list
extra_row <- c("Archipelago", extra_row)
names(extra_row) <- colnames(pca$sdev)
expvar <- rbind(pca$sdev, extra_row %>% data.frame())
expvar <- expvar %>% mutate(total = expvar %>% dplyr::select(PC1:PC4) %>% apply(1, sum))
# Save table
t2 <- expvar
col.names <- c("Island", "PC1", "PC2", "PC3", "PC4", "Total")
fname <- "analyses/03-PCA/table_expvar"
save_table(t2, fname, digits = c(0, 3, 3, 3, 3, 3), col.names = col.names)
rm(list = ls())
# Exploration of the principal component analysis
library(dewlap)
library(nmgc)
library(tidyverse)
# Here we are checking first the correlation between PC1 and brightness
# and second, the variance explained by each PC on each island
data <- read.csv("data/reflectance.csv", header = TRUE)
# Perform PCA on each island
pca <- npcomp(data, paste0("wl", 300:700), nesting = "island", combine = TRUE, reduce = 1:4)
# And on the whole archipelago
pca_pooled <- npcomp(data, paste0("wl", 300:700))
####  1. Correlation between brightness and PC1 ####
# Calculate brightness (mean reflectance)
data$brightness <- data %>% select_at(paste0("wl", 300:700)) %>% apply(1, mean)
# Attach PC1
data <- data %>% select_at(c("island", "habitat", "brightness"))
data$PC1 <- pca$x$PC1
data$PC1pooled <- pca_pooled$x[, 1]
data <- data %>%
gather_("variable", "PC1", c("PC1", "PC1pooled")) %>%
mutate(island = ifelse(variable == "PC1pooled", "Archipelago", as.character(island))) %>%
dplyr::select(-variable)
# Measure correlation
res_cor <- data %>%
split(f = .[["island"]]) %>%
map_dfr(
~ cor.test(.x$PC1, .x$brightness) %>%
.[c("estimate", "p.value")] %>%
data.frame %>%
rename(r2 = "estimate", pvalue = "p.value") %>%
mutate(r2 = r2^2),
.id = "island"
)
# Reorder
res_cor <- res_cor %>%
filter(island != "Archipelago") %>%
rbind(., res_cor %>% filter(island == "Archipelago"))
# Save table
t1 <- res_cor
t1 <- t1 %>%
add_signif() %>%
mutate(pvalue = ifelse(pvalue < 0.0001, "< 0.0001", pvalue))
col.names <- c("Island", "$r^2$", "$P$", "")
save_table(
t1, "analyses/03-PCA/table_brightness", digits = c(0, 3, 0),
col.names = col.names, align = "lrrl"
)
# Plot the correlation
p <- data %>%
filter(island != "Archipelago") %>%
ggplot(aes(x = brightness, y = PC1)) +
geom_point() +
theme_bw() +
facet_wrap(. ~ island) +
xlab("Brightness (mean reflectance, %)")
# Add labels
res_cor$r2 <- round(res_cor$r2, 3)
res_cor <- res_cor %>%
mutate(plabel = round(pvalue, 4)) %>%
mutate(plabel = ifelse(pvalue < 0.0001, "P < 0.0001", paste("P =", pvalue))) %>%
mutate(plabel = ifelse(pvalue < 0.05, str_replace(plabel, "$", "*"), plabel))
p + geom_text(
data = res_cor %>% filter(island != "Archipelago"),
aes(label = paste0("r\U000B2 = ", r2, "\n", plabel)), x = 40, y = -25, hjust = 1
)
ggsave("figure_brightness.png", width = 6, height = 6, dpi = 300)
# Now make a figure for the whole archipelago
data %>%
filter(island == "Archipelago") %>%
ggplot(aes(x = brightness, y = PC1)) +
geom_point() +
theme_bw() +
xlab("Brightness (mean reflectance, %)") +
geom_text(
data = res_cor %>% filter(island == "Archipelago"),
aes(label = paste0("r\U000B2 = ", r2, "\n", plabel)), x = 40, y = -25, hjust = 1
)
ggsave("figure_brightness_pooled.png", width = 4, height = 4, dpi = 300)
#### 2. Variance explained by the PCs ####
extra_row <- (pca_pooled$sdev / sum(pca_pooled$sdev))[1:4] %>% as.list
extra_row <- c("Archipelago", extra_row)
names(extra_row) <- colnames(pca$sdev)
expvar <- rbind(pca$sdev, extra_row %>% data.frame())
expvar <- expvar %>% mutate(total = expvar %>% dplyr::select(PC1:PC4) %>% apply(1, sum))
# Save table
t2 <- expvar
col.names <- c("Island", "PC1", "PC2", "PC3", "PC4", "Total")
fname <- "analyses/03-PCA/table_expvar"
save_table(t2, fname, digits = c(0, 3, 3, 3, 3, 3), col.names = col.names)
rm(list = ls())
library(dewlap)
library(nmgc)
library(tidyverse)
library(cowplot)
data <- read.csv("data/reflectance.csv", header = TRUE)
#### Analysis within each island ####
# Principal components
variables <- paste0("PC", 1:4)
# SVM-classification on PCs
res <- classify(
data, variables, grouping = "habitat", nesting = "island",
to_pcomp = paste0("wl", 300:700), digest = TRUE, test = TRUE, k = 5,
nrep = 100, seed = 24, method = "SVM", importance = TRUE
)
# Prepare a confusion matrix plot to show on the side
conf <- res$avg$`Long Island`
conf <- conf %>% apply(2, function(x) x / sum(x))
conf <- conf %>%
data.frame %>%
rownames_to_column("predicted") %>%
gather_("true", "freq", colnames(conf))
colnames(conf) <- c("predicted", "true", "freq")
confplot <- ggplot(conf, aes(x = true, y = predicted, fill = freq)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "darkgreen", limits = c(0, 1)) +
theme_bw() +
labs(x = "True habitat", y = "Predicted habitat", fill = "Frequency") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
blank <- ggplot() + theme_void()
p <- plot_classif(res, facets = "island")
plot_grid(p, plot_grid(blank, confplot, blank, nrow = 3), ncol = 2, rel_widths = c(2, 1))
ggsave("classif_svm_pca.png", height = 6, width = 9, dpi = 300)
fname <- "analyses/04-machine learning/table_classif_%s"
colnames <- c("Island", "Accuracy", "$N$", "$p_{\\mbox{test}}$", "$n_{\\mbox{test}}$", "$P$", "")
t1 <- res$mean
t1_fname <- sprintf(fname, "svm_pca")
save_table(t1, t1_fname, digits = c(0, 3, 0, 1, 0, 4, 0), col.names = colnames)
res$imp %>%
gather_("variable", "importance", variables) %>%
filter(island %in% c("Abaco", "Bimini", "Cayman Brac", "Little Cayman", "Long Island")) %>%
ggplot(aes(x = variable, y = importance)) +
geom_boxplot() +
theme_bw() +
labs(x = NULL, y = "Relative importance") +
facet_wrap(. ~ island) +
geom_hline(yintercept = 0.25, lty = 2)
ggsave("importance_svm_pca.png", height = 4, width = 5, dpi = 300)
# LDA-classification on PCs
res <- classify(
data, variables, grouping = "habitat", nesting = "island",
to_pcomp = paste0("wl", 300:700), digest = TRUE, test = TRUE, k = 5,
nrep = 100, seed = 24, method = "LDA", importance = TRUE
)
p <- plot_classif(res, facets = "island", fill = "coral")
plot_grid(p, plot_grid(blank, confplot, blank, nrow = 3), ncol = 2, rel_widths = c(2, 1))
ggsave("classif_lda_pca.png", height = 6, width = 9, dpi = 300)
t2 <- res$mean
t2_fname <- sprintf(fname, "lda_pca")
save_table(t2, t2_fname, digits = c(0, 3, 0, 1, 0, 4, 0), col.names = colnames)
res$imp %>%
gather_("variable", "importance", variables) %>%
filter(island %in% c("Abaco", "Bimini", "Cayman Brac", "Little Cayman", "Long Island")) %>%
ggplot(aes(x = variable, y = importance)) +
geom_boxplot() +
theme_bw() +
labs(x = NULL, y = "Relative importance") +
facet_wrap(. ~ island) +
geom_hline(yintercept = 0.25, lty = 2)
ggsave("importance_lda_pca.png", height = 4, width = 5, dpi = 300)
# Reflectance data
# SVM-classification on reflectance
variables <- paste0("wl", seq(300, 700, 50))
res <- classify(
data, variables, grouping = "habitat", nesting = "island", digest = TRUE, test = TRUE, k = 5,
nrep = 100, seed = 24, method = "SVM", importance = TRUE
)
p <- plot_classif(res, facets = "island")
plot_grid(p, plot_grid(blank, confplot, blank, nrow = 3), ncol = 2, rel_widths = c(2, 1))
ggsave("classif_svm_refl.png", height = 6, width = 9, dpi = 300)
t3 <- res$mean
t3_fname <- sprintf(fname, "svm_refl")
save_table(t3, t3_fname, digits = c(0, 3, 0, 1, 0, 4, 0), col.names = colnames)
res$imp %>%
gather_("variable", "importance", variables) %>%
mutate(variable = variable %>% str_replace("wl", "")) %>%
filter(island %in% c("Abaco", "Bimini", "Cayman Brac", "Little Cayman", "Long Island")) %>%
ggplot(aes(x = variable, y = importance)) +
geom_boxplot() +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
labs(x = "Wavelength (nm)", y = "Relative importance") +
facet_wrap(. ~ island) +
geom_hline(yintercept = 1/length(variables), lty = 2)
ggsave("importance_svm_refl.png", height = 4, width = 5, dpi = 300)
# LDA-classification on reflectance
res <- classify(
data, variables, grouping = "habitat", nesting = "island", digest = TRUE, test = TRUE, k = 5,
nrep = 100, seed = 24, method = "LDA", importance = TRUE
)
p <- plot_classif(res, facets = "island", fill = "coral")
plot_grid(p, plot_grid(blank, confplot, blank, nrow = 3), ncol = 2, rel_widths = c(2, 1))
ggsave("classif_lda_refl.png", height = 6, width = 9, dpi = 300)
t4 <- res$mean
t4_fname <- sprintf(fname, "lda_refl")
save_table(t4, t4_fname, digits = c(0, 3, 0, 1, 0, 4, 0), col.names = colnames)
res$imp %>%
gather_("variable", "importance", variables) %>%
mutate(variable = variable %>% str_replace("wl", "")) %>%
filter(island %in% c("Abaco", "Bimini", "Cayman Brac", "Little Cayman", "Long Island")) %>%
ggplot(aes(x = variable, y = importance)) +
geom_boxplot() +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
labs(x = "Wavelength (nm)", y = "Relative importance") +
facet_wrap(. ~ island) +
geom_hline(yintercept = 1/length(variables), lty = 2)
ggsave("importance_lda_refl.png", height = 4, width = 5, dpi = 300)
#### Pooling the islands together ####
# Principal components
variables <- paste0("PC", 1:4)
# SVM-classification of PCs
res <- classify(
data, variables, grouping = "habitat",
to_pcomp = paste0("wl", 300:400), digest = TRUE, test = TRUE, k = 5,
nrep = 100, seed = 24, method = "SVM", importance = TRUE
)
p <- plot_classif(res, bins = 50, ylim = c(0, 100), dfac = 1000, py = 90, add_insets = FALSE)
confplot <- plot_classif(res, type = "confusion") +
labs(x = "True habitat", y = "Predicted habitat", fill = "Frequency") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
plot_grid(p, plot_grid(blank, confplot, blank, nrow = 3, rel_heights = c(1, 3, 1)), ncol = 2, rel_widths = c(1.1, 1))
ggsave("classif_svm_pca_pooled.png", height = 3, width = 6, dpi = 300)
t5 <- res$mean
t5_fname <- sprintf(fname, "svm_pca_pooled")
save_table(t5, t5_fname, digits = c(0, 3, 0, 1, 0, 4, 0), col.names = colnames)
res$imp %>%
gather_("variable", "importance", variables) %>%
ggplot(aes(x = variable, y = importance)) +
geom_boxplot() +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
labs(x = "Wavelength (nm)", y = "Relative importance") +
geom_hline(yintercept = 1/length(variables), lty = 2)
ggsave("importance_svm_pca_pooled.png", height = 3, width = 3, dpi = 300)
# LDA-classification on PCs
res <- classify(
data, variables, grouping = "habitat",
to_pcomp = paste0("wl", 300:400), digest = TRUE, test = TRUE, k = 5,
nrep = 100, seed = 24, method = "LDA", importance = TRUE
)
p <- plot_classif(res, bins = 50, ylim = c(0, 100), dfac = 1000, py = 90, add_insets = FALSE, fill = "coral")
confplot <- plot_classif(res, type = "confusion") +
labs(x = "True habitat", y = "Predicted habitat", fill = "Frequency") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
plot_grid(p, plot_grid(blank, confplot, blank, nrow = 3, rel_heights = c(1, 3, 1)), ncol = 2, rel_widths = c(1.1, 1))
ggsave("classif_lda_pca_pooled.png", height = 3, width = 6, dpi = 300)
t6 <- res$mean
t6_fname <- sprintf(fname, "lda_pca_pooled")
save_table(t6, t6_fname, digits = c(0, 3, 0, 1, 0, 4, 0), col.names = colnames)
res$imp %>%
gather_("variable", "importance", variables) %>%
ggplot(aes(x = variable, y = importance)) +
geom_boxplot() +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
labs(x = "Wavelength (nm)", y = "Relative importance") +
geom_hline(yintercept = 1/length(variables), lty = 2)
ggsave("importance_lda_pca_pooled.png", height = 3, width = 3, dpi = 300)
# Reflectance data
variables <- paste0("wl", seq(300, 700, 50))
# SVM-classification on reflectance
res <- classify(
data, variables, grouping = "habitat", digest = TRUE, test = TRUE, k = 5,
nrep = 100, seed = 24, method = "SVM", importance = TRUE
)
p <- plot_classif(res, bins = 50, ylim = c(0, 100), dfac = 1000, py = 90, add_insets = FALSE)
confplot <- plot_classif(res, type = "confusion") +
labs(x = "True habitat", y = "Predicted habitat", fill = "Frequency") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
plot_grid(p, plot_grid(blank, confplot, blank, nrow = 3, rel_heights = c(1, 3, 1)), ncol = 2, rel_widths = c(1.1, 1))
ggsave("classif_svm_refl_pooled.png", height = 3, width = 6, dpi = 300)
t7 <- res$mean
t7_fname <- sprintf(fname, "svm_refl_pooled")
save_table(t7, t7_fname, digits = c(0, 3, 0, 1, 0, 4, 0), col.names = colnames)
res$imp %>%
gather_("variable", "importance", variables) %>%
mutate(variable = variable %>% str_replace("wl", "")) %>%
ggplot(aes(x = variable, y = importance)) +
geom_boxplot() +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
labs(x = "Wavelength (nm)", y = "Relative importance") +
geom_hline(yintercept = 1/length(variables), lty = 2)
ggsave("importance_svm_refl_pooled.png", height = 4, width = 5, dpi = 300)
# LDA-classification on reflectance
res <- classify(
data, variables, grouping = "habitat", digest = TRUE, test = TRUE, k = 5,
nrep = 100, seed = 24, method = "LDA", importance = TRUE
)
p <- plot_classif(res, bins = 50, ylim = c(0, 100), dfac = 1000, py = 90, add_insets = FALSE, fill = "coral")
confplot <- plot_classif(res, type = "confusion") +
labs(x = "True habitat", y = "Predicted habitat", fill = "Frequency") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
plot_grid(p, plot_grid(blank, confplot, blank, nrow = 3, rel_heights = c(1, 3, 1)), ncol = 2, rel_widths = c(1.1, 1))
ggsave("classif_lda_refl_pooled.png", height = 3, width = 6, dpi = 300)
t8 <- res$mean
t8_fname <- sprintf(fname, "lda_refl_pooled")
save_table(t8, t8_fname, digits = c(0, 3, 0, 1, 0, 4, 0), col.names = colnames)
res$imp %>%
gather_("variable", "importance", variables) %>%
mutate(variable = variable %>% str_replace("wl", "")) %>%
ggplot(aes(x = variable, y = importance)) +
geom_boxplot() +
theme_bw() +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
labs(x = "Wavelength (nm)", y = "Relative importance") +
geom_hline(yintercept = 1/length(variables), lty = 2)
ggsave("importance_lda_refl_pooled.png", height = 4, width = 5, dpi = 300)
getwd()
list.files()
